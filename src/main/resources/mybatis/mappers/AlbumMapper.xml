<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.cdtrade.mapper.AlbumMapper">


	
	<select id="getTotalRows" parameterType="map">
		select
			count(*)
		from
			albums
		<if test="keyword != null and keyword != ''">
			where upper(album_title) like '%' || upper(#{keyword}) || '%'
		</if>
	</select>
	
	<!-- 
		List<Album> getAlbums(Map<String, Object> condition);
			* condition의 요소 - minReviewCount, offset, rows, sort, keyword
	 -->
	<select id="getAlbums" parameterType="map" resultType="Album">
		select
			album_no			as	no
		  , album_title			as	title
		  , artist_name			as	artistName
		  , release_date		as	releaseDate
		  , cover_image_url		as	coverImageUrl
		  , avg_rating			as	avgRating
		  , review_count		as	reviewCount
		  , stock_quantity		as	stockQuantity
		  , avg_order_price		as	avgOrderPrice
		  , avg_sale_price		as	avgSalePrice
	      , album_created_at	as	albumCreatedAt
		  , album_updated_at	as	albumUpdatedAt
		  , release_price		as	releasePrice
		  , recent_order_price	as	recentOrderPrice
		from 
			albums 
		<if test="minReviewCount != null">
			where review_count >= #{minReviewCount}
		</if>
		<if test="keyword != null and keyword != ''">
			where upper(album_title) like '%' || upper(#{keyword}) || '%'
		</if>
		<choose>
	 		<when test="sort == 'newest'">
	 			order by release_date desc
	 		</when>
	 		<when test="sort == 'price-asc'">
	 			order by avg_order_price asc nulls last
	 		</when>
	 		<when test="sort == 'price-desc'">
	 			order by avg_order_price desc nulls last
	 		</when>
	 		<when test="sort == 'rating'">
	 			order by avg_rating desc nulls last
	 		</when>
	 		<when test="sort == 'stock'">
	 			order by stock_quantity desc nulls last
	 		</when>
	 		<when test="sort == 'review-count'">
	 			order by review_count desc nulls last
	 		</when>
	 	</choose>
	 	offset #{offset} rows
	 	fetch next #{rows} rows only
	</select>

	<!-- 
		void insertAlbum(Album album);
	 -->
	<insert id="insertAlbum">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select seq_album_no.nextval from dual
		</selectKey>
		
		insert into albums
		(album_no, album_title, artist_name, release_date, cover_image_url, release_price)
		values
		(#{no}, #{title}, #{artistName}, #{releaseDate}, #{coverImageUrl}, #{releasePrice})
	</insert>
	
	<!-- 
		Album getAlbumByNo(int albumNo);
	 -->
	<select id="getAlbumByNo" resultType="Album">
		select album_no as no
			 , album_title as title
	         , artist_name as artistName
	         , release_date as releaseDate
	         , cover_image_url as coverImageUrl
	         , avg_rating as avgRating
	         , review_count as reviewCount
	         , stock_quantity as stockQuantity
	         , avg_order_price as avgOrderPrice
	         , avg_sale_price as avgSalePrice
	         , album_created_at as createdAt
	         , album_updated_at as updatedAt
	         , release_price as releasePrice
	         , recent_order_price as recentOrderPrice
		from albums
		where album_no = #{albumNo}
	</select>
	
	<!-- 
		void updateAlbum(Album album);
	 -->
	 <update id="updateAlbum">
	 	update albums
		set album_title        = #{title}
	       , artist_name        = #{artistName}
	       , release_date       = #{releaseDate}
	       , cover_image_url    = #{coverImageUrl}
	       , avg_rating         = #{avgRating}
	       , review_count       = #{reviewCount}
	       , stock_quantity     = #{stockQuantity}
	       , avg_order_price    = #{avgOrderPrice}
	       , avg_sale_price     = #{avgSalePrice}
	       , album_created_at   = #{createdAt}
	       , album_updated_at   = #{updatedAt}
	       , release_price      = #{releasePrice}
	       , recent_order_price = #{recentOrderPrice}
	    where album_no          = #{no}
	 		
	 </update>
		

	<select id="getAlbumByAlbumNo" resultType="Album">
		select
	  	    album_no			as	no
		  , album_title			as	title
		  , artist_name			as	artistName
		  , release_date		as	releaseDate
		  , cover_image_url		as	coverImageUrl
		  , avg_rating			as	avgRating
		  , review_count		as	reviewCount
	      , stock_quantity		as	stockQuantity
		  , avg_order_price		as	avgOrderPrice
		  , avg_sale_price		as	avgSalePrice
		  , album_created_at	as	albumCreatedAt
	      , album_updated_at	as	albumUpdatedAt
		  , release_price		as	releasePrice
	      , recent_order_price	as	recentOrderPrice		
		from 
			albums
		where
			album_no = #{no}
	
	</select>
	
	<select id="getGenreByAlbumNo" resultType="Genre">
		select
			g.genre_no		as no,
		    g.genre_name	as name
		from
			albums a, albums_genres ag, genres g
		where
			a.album_no = #{no}
			and a.album_no = ag.album_no
			and ag.genre_no = g.genre_no
	</select>
	

	<select id="getOrderbyAlbumNo" resultType="Order">
		select
			o.order_no					as no
			, o.order_price				as price
			, o.order_delivery_fee		as deliveryFee
			, o.order_payment_method	as paymentMethod
			, o.order_status			as status
			, o.order_created_at		as createdAt
			, o.order_updated_at		as updateAt
			, o.addr_no					as addrNo
			, o.sale_no					as saleNo
			, o.album_no				as albumNo
			, o.user_no					as userNo
		    , a.album_title			as	title
		    , a.artist_name			as	artistName
		    , a.release_date		as	releaseDate
		    , a.cover_image_url		as	coverImageUrl
		    , a.avg_rating			as	avgRating
		    , a.review_count		as	reviewCount
	        , a.stock_quantity		as	stockQuantity
		    , a.avg_order_price		as	avgOrderPrice
		    , a.avg_sale_price		as	avgSalePrice
		    , a.album_created_at	as	albumCreatedAt
	        , a.album_updated_at	as	albumUpdatedAt
		    , a.release_price		as	releasePrice
	        , a.recent_order_price	as	recentOrderPrice	
		from
			albums a, orders o, sales s
		where
			album_no = #{no}	
			and a.album_no = o.album_no
			and a.album_no = s.album_no
	</select>
	



</mapper>